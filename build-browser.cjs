const esbuild = require('esbuild');
const path = require('path');
const { polyfillNode } = require('esbuild-plugin-polyfill-node');

const webWorkerPlugin = {
  name: 'webWorker',
  setup(build) {
    build.onResolve({ filter: /worker/ }, args => {
      // Feel free to remove this logline once you verify that the plugin works for your setup
      console.debug(`The web worker plugin matched an import to ${args.path} from ${args.importer}`);
      return {
        path: args.path,
        namespace: 'webWorker',
        pluginData: { importer: args.importer },
      };
    });
    build.onLoad({ filter: /.*/, namespace: 'webWorker' }, async args => {
      const { path: importPath, pluginData: { importer } } = args;

      const workerWithFullPath = path.join(path.dirname(importer), importPath);
      const workerFileName = path.basename(workerWithFullPath);

      // You only need this for TypeScript
      // because the import will refer to a .ts file
      // but the web worker will need to point to a .js file
      const outFileName = workerFileName.replace(/\.ts$/, '.js');

      // This one depends on your file structure
      const outFileWithRelativePath = path.join('example', 'bundle', outFileName);

      try {
        await esbuild.build({
          entryPoints: [workerWithFullPath],
          outfile: outFileWithRelativePath,
          minify: true,
          bundle: true,
        });
        return {
          contents: `
// This file is generated by esbuild to expose the worker script as a class, like Webpack's worker-loader
export default class {
    constructor() {
        // This path depends on how you serve your files
        return new Worker('/bundle/${outFileName}');
    }
}
`,
        };
      } catch (e) {
        console.error('Could not build worker script:', e);
      }
    });
  },
};

const build = async () => {
  try {
    await esbuild
      .build({
        entryPoints: ['./dist/browser.js'],
        bundle: true,
        outfile: 'browser.js',
        globalName: 'greybelLanguageserver',
        sourcemap: false,
        minify: true,
        minifyWhitespace: true,
        minifyIdentifiers: true,
        minifySyntax: true,
        target: 'ESNext',
        platform: 'browser',
        treeShaking: true,
        format: 'iife',
        external: [
          'vscode-languageserver/node',
        ],
        plugins: [
          webWorkerPlugin,
          polyfillNode({
            globals: false
          })
        ]
      });
  } catch (err) {
    console.error('Failed building project', { err });
    process.exit(1);
  }
};

build();
